/**
 * generated by Xtext 2.12.0
 */
package uk.ac.ox.cs.mDML.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import uk.ac.ox.cs.mDML.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MDMLFactoryImpl extends EFactoryImpl implements MDMLFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static MDMLFactory init()
  {
    try
    {
      MDMLFactory theMDMLFactory = (MDMLFactory)EPackage.Registry.INSTANCE.getEFactory(MDMLPackage.eNS_URI);
      if (theMDMLFactory != null)
      {
        return theMDMLFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new MDMLFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MDMLFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case MDMLPackage.DOMAIN_REGISTRY: return createDomainRegistry();
      case MDMLPackage.DATA_MODEL: return createDataModel();
      case MDMLPackage.DATA_ITEM: return createDataItem();
      case MDMLPackage.REFERENCE: return createReference();
      case MDMLPackage.RELATION_SOURCE: return createRelationSource();
      case MDMLPackage.RELATION_DESTINATION: return createRelationDestination();
      case MDMLPackage.RELATIONSHIP: return createRelationship();
      case MDMLPackage.EXTENSION_ITEM: return createExtensionItem();
      case MDMLPackage.IMPORT: return createImport();
      case MDMLPackage.DATA_TYPE: return createDataType();
      case MDMLPackage.ENUMERATED_TYPE: return createEnumeratedType();
      case MDMLPackage.REFERENCE_TYPE: return createReferenceType();
      case MDMLPackage.PRIMITIVE_TYPE: return createPrimitiveType();
      case MDMLPackage.BASIC: return createBasic();
      case MDMLPackage.CONTAINER_ELEMENT: return createContainerElement();
      case MDMLPackage.DATA_CLASS: return createDataClass();
      case MDMLPackage.DATA_ELEMENT: return createDataElement();
      case MDMLPackage.CONSTRAINT: return createConstraint();
      case MDMLPackage.PREDICATE: return createPredicate();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DomainRegistry createDomainRegistry()
  {
    DomainRegistryImpl domainRegistry = new DomainRegistryImpl();
    return domainRegistry;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DataModel createDataModel()
  {
    DataModelImpl dataModel = new DataModelImpl();
    return dataModel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DataItem createDataItem()
  {
    DataItemImpl dataItem = new DataItemImpl();
    return dataItem;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Reference createReference()
  {
    ReferenceImpl reference = new ReferenceImpl();
    return reference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RelationSource createRelationSource()
  {
    RelationSourceImpl relationSource = new RelationSourceImpl();
    return relationSource;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RelationDestination createRelationDestination()
  {
    RelationDestinationImpl relationDestination = new RelationDestinationImpl();
    return relationDestination;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Relationship createRelationship()
  {
    RelationshipImpl relationship = new RelationshipImpl();
    return relationship;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExtensionItem createExtensionItem()
  {
    ExtensionItemImpl extensionItem = new ExtensionItemImpl();
    return extensionItem;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Import createImport()
  {
    ImportImpl import_ = new ImportImpl();
    return import_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DataType createDataType()
  {
    DataTypeImpl dataType = new DataTypeImpl();
    return dataType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EnumeratedType createEnumeratedType()
  {
    EnumeratedTypeImpl enumeratedType = new EnumeratedTypeImpl();
    return enumeratedType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ReferenceType createReferenceType()
  {
    ReferenceTypeImpl referenceType = new ReferenceTypeImpl();
    return referenceType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PrimitiveType createPrimitiveType()
  {
    PrimitiveTypeImpl primitiveType = new PrimitiveTypeImpl();
    return primitiveType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Basic createBasic()
  {
    BasicImpl basic = new BasicImpl();
    return basic;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ContainerElement createContainerElement()
  {
    ContainerElementImpl containerElement = new ContainerElementImpl();
    return containerElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DataClass createDataClass()
  {
    DataClassImpl dataClass = new DataClassImpl();
    return dataClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DataElement createDataElement()
  {
    DataElementImpl dataElement = new DataElementImpl();
    return dataElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Constraint createConstraint()
  {
    ConstraintImpl constraint = new ConstraintImpl();
    return constraint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Predicate createPredicate()
  {
    PredicateImpl predicate = new PredicateImpl();
    return predicate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MDMLPackage getMDMLPackage()
  {
    return (MDMLPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static MDMLPackage getPackage()
  {
    return MDMLPackage.eINSTANCE;
  }

} //MDMLFactoryImpl
