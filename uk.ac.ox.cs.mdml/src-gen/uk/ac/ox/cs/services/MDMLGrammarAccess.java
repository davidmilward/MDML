/*
 * generated by Xtext 2.12.0
 */
package uk.ac.ox.cs.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MDMLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DomainRegistryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.ox.cs.MDML.DomainRegistry");
		private final Assignment cRegisteredItemsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cRegisteredItemsDataModelParserRuleCall_0 = (RuleCall)cRegisteredItemsAssignment.eContents().get(0);
		
		//DomainRegistry:
		//	registeredItems+=DataModel*;
		@Override public ParserRule getRule() { return rule; }
		
		//registeredItems+=DataModel*
		public Assignment getRegisteredItemsAssignment() { return cRegisteredItemsAssignment; }
		
		//DataModel
		public RuleCall getRegisteredItemsDataModelParserRuleCall_0() { return cRegisteredItemsDataModelParserRuleCall_0; }
	}
	public class DataModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.ox.cs.MDML.DataModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDataModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cStatusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatusAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatusStatusParserRuleCall_3_0 = (RuleCall)cStatusAssignment_3.eContents().get(0);
		private final Keyword cDomainidKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cGuidAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cGuidGUIDParserRuleCall_5_0 = (RuleCall)cGuidAssignment_5.eContents().get(0);
		private final Keyword cCommercialAtKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final RuleCall cVersionParserRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		private final Keyword cRightParenthesisKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cRefinesAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cRefinesREFINEParserRuleCall_10_0 = (RuleCall)cRefinesAssignment_10.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cElementsAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cElementsDataItemParserRuleCall_12_0 = (RuleCall)cElementsAssignment_12.eContents().get(0);
		private final Assignment cRelationsAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cRelationsRelationshipParserRuleCall_13_0 = (RuleCall)cRelationsAssignment_13.eContents().get(0);
		private final Assignment cConstraintAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final RuleCall cConstraintConstraintParserRuleCall_14_0 = (RuleCall)cConstraintAssignment_14.eContents().get(0);
		private final Assignment cPredicateAssignment_15 = (Assignment)cGroup.eContents().get(15);
		private final RuleCall cPredicatePredicateParserRuleCall_15_0 = (RuleCall)cPredicateAssignment_15.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_16 = (Keyword)cGroup.eContents().get(16);
		
		//DataModel:
		//	'DataModel' name=QualifiedName 'status:' status=Status 'domainid:' guid=GUID '@' '(' Version ')' refines=REFINE '{'
		//	elements+=DataItem*
		//	relations+=Relationship*
		//	constraint+=Constraint*
		//	predicate+=Predicate*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'DataModel' name=QualifiedName 'status:' status=Status 'domainid:' guid=GUID '@' '(' Version ')' refines=REFINE '{'
		//elements+=DataItem* relations+=Relationship* constraint+=Constraint* predicate+=Predicate* '}'
		public Group getGroup() { return cGroup; }
		
		//'DataModel'
		public Keyword getDataModelKeyword_0() { return cDataModelKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//'status:'
		public Keyword getStatusKeyword_2() { return cStatusKeyword_2; }
		
		//status=Status
		public Assignment getStatusAssignment_3() { return cStatusAssignment_3; }
		
		//Status
		public RuleCall getStatusStatusParserRuleCall_3_0() { return cStatusStatusParserRuleCall_3_0; }
		
		//'domainid:'
		public Keyword getDomainidKeyword_4() { return cDomainidKeyword_4; }
		
		//guid=GUID
		public Assignment getGuidAssignment_5() { return cGuidAssignment_5; }
		
		//GUID
		public RuleCall getGuidGUIDParserRuleCall_5_0() { return cGuidGUIDParserRuleCall_5_0; }
		
		//'@'
		public Keyword getCommercialAtKeyword_6() { return cCommercialAtKeyword_6; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_7() { return cLeftParenthesisKeyword_7; }
		
		//Version
		public RuleCall getVersionParserRuleCall_8() { return cVersionParserRuleCall_8; }
		
		//')'
		public Keyword getRightParenthesisKeyword_9() { return cRightParenthesisKeyword_9; }
		
		//refines=REFINE
		public Assignment getRefinesAssignment_10() { return cRefinesAssignment_10; }
		
		//REFINE
		public RuleCall getRefinesREFINEParserRuleCall_10_0() { return cRefinesREFINEParserRuleCall_10_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_11() { return cLeftCurlyBracketKeyword_11; }
		
		//elements+=DataItem*
		public Assignment getElementsAssignment_12() { return cElementsAssignment_12; }
		
		//DataItem
		public RuleCall getElementsDataItemParserRuleCall_12_0() { return cElementsDataItemParserRuleCall_12_0; }
		
		//relations+=Relationship*
		public Assignment getRelationsAssignment_13() { return cRelationsAssignment_13; }
		
		//Relationship
		public RuleCall getRelationsRelationshipParserRuleCall_13_0() { return cRelationsRelationshipParserRuleCall_13_0; }
		
		//constraint+=Constraint*
		public Assignment getConstraintAssignment_14() { return cConstraintAssignment_14; }
		
		//Constraint
		public RuleCall getConstraintConstraintParserRuleCall_14_0() { return cConstraintConstraintParserRuleCall_14_0; }
		
		//predicate+=Predicate*
		public Assignment getPredicateAssignment_15() { return cPredicateAssignment_15; }
		
		//Predicate
		public RuleCall getPredicatePredicateParserRuleCall_15_0() { return cPredicatePredicateParserRuleCall_15_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_16() { return cRightCurlyBracketKeyword_16; }
	}
	public class DataItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.ox.cs.MDML.DataItem");
		private final Assignment cDataitemAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cDataitemAlternatives_0 = (Alternatives)cDataitemAssignment.eContents().get(0);
		private final RuleCall cDataitemDataModelParserRuleCall_0_0 = (RuleCall)cDataitemAlternatives_0.eContents().get(0);
		private final RuleCall cDataitemDataClassParserRuleCall_0_1 = (RuleCall)cDataitemAlternatives_0.eContents().get(1);
		private final RuleCall cDataitemDataElementParserRuleCall_0_2 = (RuleCall)cDataitemAlternatives_0.eContents().get(2);
		private final RuleCall cDataitemDataTypeParserRuleCall_0_3 = (RuleCall)cDataitemAlternatives_0.eContents().get(3);
		private final RuleCall cDataitemImportParserRuleCall_0_4 = (RuleCall)cDataitemAlternatives_0.eContents().get(4);
		private final RuleCall cDataitemExtensionItemParserRuleCall_0_5 = (RuleCall)cDataitemAlternatives_0.eContents().get(5);
		
		//DataItem:
		//	dataitem=(DataModel | DataClass | DataElement | DataType | Import | ExtensionItem);
		@Override public ParserRule getRule() { return rule; }
		
		//dataitem=(DataModel | DataClass | DataElement | DataType | Import | ExtensionItem)
		public Assignment getDataitemAssignment() { return cDataitemAssignment; }
		
		//(DataModel | DataClass | DataElement | DataType | Import | ExtensionItem)
		public Alternatives getDataitemAlternatives_0() { return cDataitemAlternatives_0; }
		
		//DataModel
		public RuleCall getDataitemDataModelParserRuleCall_0_0() { return cDataitemDataModelParserRuleCall_0_0; }
		
		//DataClass
		public RuleCall getDataitemDataClassParserRuleCall_0_1() { return cDataitemDataClassParserRuleCall_0_1; }
		
		//DataElement
		public RuleCall getDataitemDataElementParserRuleCall_0_2() { return cDataitemDataElementParserRuleCall_0_2; }
		
		//DataType
		public RuleCall getDataitemDataTypeParserRuleCall_0_3() { return cDataitemDataTypeParserRuleCall_0_3; }
		
		//Import
		public RuleCall getDataitemImportParserRuleCall_0_4() { return cDataitemImportParserRuleCall_0_4; }
		
		//ExtensionItem
		public RuleCall getDataitemExtensionItemParserRuleCall_0_5() { return cDataitemExtensionItemParserRuleCall_0_5; }
	}
	public class REFINEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.ox.cs.MDML.REFINE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cREFINESParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDOESNOTREFINEParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//REFINE:
		//	(REFINES | DOESNOTREFINE)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(REFINES | DOESNOTREFINE)?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//REFINES
		public RuleCall getREFINESParserRuleCall_0() { return cREFINESParserRuleCall_0; }
		
		//DOESNOTREFINE
		public RuleCall getDOESNOTREFINEParserRuleCall_1() { return cDOESNOTREFINEParserRuleCall_1; }
	}
	public class REFINESElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.ox.cs.MDML.REFINES");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRefinesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cPathParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//REFINES:
		//	'refines' ':' Path;
		@Override public ParserRule getRule() { return rule; }
		
		//'refines' ':' Path
		public Group getGroup() { return cGroup; }
		
		//'refines'
		public Keyword getRefinesKeyword_0() { return cRefinesKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//Path
		public RuleCall getPathParserRuleCall_2() { return cPathParserRuleCall_2; }
	}
	public class DOESNOTREFINEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.ox.cs.MDML.DOESNOTREFINE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDoesnotrefineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cPathParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//DOESNOTREFINE:
		//	'doesnotrefine' ':' Path;
		@Override public ParserRule getRule() { return rule; }
		
		//'doesnotrefine' ':' Path
		public Group getGroup() { return cGroup; }
		
		//'doesnotrefine'
		public Keyword getDoesnotrefineKeyword_0() { return cDoesnotrefineKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//Path
		public RuleCall getPathParserRuleCall_2() { return cPathParserRuleCall_2; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.ox.cs.MDML.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class PathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.ox.cs.MDML.Path");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSolidusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cQualifiedNameParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Path:
		//	QualifiedName ('/' QualifiedName)*;
		@Override public ParserRule getRule() { return rule; }
		
		//QualifiedName ('/' QualifiedName)*
		public Group getGroup() { return cGroup; }
		
		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }
		
		//('/' QualifiedName)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'/'
		public Keyword getSolidusKeyword_1_0() { return cSolidusKeyword_1_0; }
		
		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_1_1() { return cQualifiedNameParserRuleCall_1_1; }
	}
	public class GUIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.ox.cs.MDML.GUID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cSolidusKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		
		//GUID:
		//	ID ('.' ID | '/' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID | '/' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID | '/' ID)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'.' ID
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0_0() { return cFullStopKeyword_1_0_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_0_1() { return cIDTerminalRuleCall_1_0_1; }
		
		//'/' ID
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'/'
		public Keyword getSolidusKeyword_1_1_0() { return cSolidusKeyword_1_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1_1() { return cIDTerminalRuleCall_1_1_1; }
	}
	public class VersionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.ox.cs.MDML.Version");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cINTTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//Version:
		//	INT '.' INT '.' INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT '.' INT '.' INT
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
		
		//'.'
		public Keyword getFullStopKeyword_3() { return cFullStopKeyword_3; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_4() { return cINTTerminalRuleCall_4; }
	}
	public class ReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.ox.cs.MDML.Reference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTypeDataItemCrossReference_3_0 = (CrossReference)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cTypeDataItemIDTerminalRuleCall_3_0_1 = (RuleCall)cTypeDataItemCrossReference_3_0.eContents().get(1);
		
		//Reference:
		//	"ref" name=ID ":" type=[DataItem];
		@Override public ParserRule getRule() { return rule; }
		
		//"ref" name=ID ":" type=[DataItem]
		public Group getGroup() { return cGroup; }
		
		//"ref"
		public Keyword getRefKeyword_0() { return cRefKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=[DataItem]
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//[DataItem]
		public CrossReference getTypeDataItemCrossReference_3_0() { return cTypeDataItemCrossReference_3_0; }
		
		//ID
		public RuleCall getTypeDataItemIDTerminalRuleCall_3_0_1() { return cTypeDataItemIDTerminalRuleCall_3_0_1; }
	}
	public class RelationSourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.ox.cs.MDML.RelationSource");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDataModelParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDataClassParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDataElementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDataTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//RelationSource:
		//	DataModel | DataClass | DataElement | DataType;
		@Override public ParserRule getRule() { return rule; }
		
		//DataModel | DataClass | DataElement | DataType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DataModel
		public RuleCall getDataModelParserRuleCall_0() { return cDataModelParserRuleCall_0; }
		
		//DataClass
		public RuleCall getDataClassParserRuleCall_1() { return cDataClassParserRuleCall_1; }
		
		//DataElement
		public RuleCall getDataElementParserRuleCall_2() { return cDataElementParserRuleCall_2; }
		
		//DataType
		public RuleCall getDataTypeParserRuleCall_3() { return cDataTypeParserRuleCall_3; }
	}
	public class RelationDestinationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.ox.cs.MDML.RelationDestination");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDataModelParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDataClassParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDataElementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDataTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//RelationDestination:
		//	DataModel | DataClass | DataElement | DataType;
		@Override public ParserRule getRule() { return rule; }
		
		//DataModel | DataClass | DataElement | DataType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DataModel
		public RuleCall getDataModelParserRuleCall_0() { return cDataModelParserRuleCall_0; }
		
		//DataClass
		public RuleCall getDataClassParserRuleCall_1() { return cDataClassParserRuleCall_1; }
		
		//DataElement
		public RuleCall getDataElementParserRuleCall_2() { return cDataElementParserRuleCall_2; }
		
		//DataType
		public RuleCall getDataTypeParserRuleCall_3() { return cDataTypeParserRuleCall_3; }
	}
	public class RelationshipElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.ox.cs.MDML.Relationship");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRelationshipKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cSrcAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cSrcRelationSourceParserRuleCall_1_0_0 = (RuleCall)cSrcAssignment_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cDestAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cDestRelationDestinationParserRuleCall_1_2_0 = (RuleCall)cDestAssignment_1_2.eContents().get(0);
		
		//Relationship:
		//	'relationship' (src=RelationSource ':' dest=RelationDestination);
		@Override public ParserRule getRule() { return rule; }
		
		//'relationship' (src=RelationSource ':' dest=RelationDestination)
		public Group getGroup() { return cGroup; }
		
		//'relationship'
		public Keyword getRelationshipKeyword_0() { return cRelationshipKeyword_0; }
		
		//src=RelationSource ':' dest=RelationDestination
		public Group getGroup_1() { return cGroup_1; }
		
		//src=RelationSource
		public Assignment getSrcAssignment_1_0() { return cSrcAssignment_1_0; }
		
		//RelationSource
		public RuleCall getSrcRelationSourceParserRuleCall_1_0_0() { return cSrcRelationSourceParserRuleCall_1_0_0; }
		
		//':'
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }
		
		//dest=RelationDestination
		public Assignment getDestAssignment_1_2() { return cDestAssignment_1_2; }
		
		//RelationDestination
		public RuleCall getDestRelationDestinationParserRuleCall_1_2_0() { return cDestRelationDestinationParserRuleCall_1_2_0; }
	}
	public class ExtensionItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.ox.cs.MDML.ExtensionItem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExtensionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cKeyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKeyIDTerminalRuleCall_1_0 = (RuleCall)cKeyAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueSTRINGTerminalRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ExtensionItem:
		//	'extension' key=ID '=' value=STRING ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'extension' key=ID '=' value=STRING ';'
		public Group getGroup() { return cGroup; }
		
		//'extension'
		public Keyword getExtensionKeyword_0() { return cExtensionKeyword_0; }
		
		//key=ID
		public Assignment getKeyAssignment_1() { return cKeyAssignment_1; }
		
		//ID
		public RuleCall getKeyIDTerminalRuleCall_1_0() { return cKeyIDTerminalRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//value=STRING
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_3_0() { return cValueSTRINGTerminalRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.ox.cs.MDML.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//Import:
		//	'import' importedNamespace=QualifiedNameWithWildcard;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importedNamespace=QualifiedNameWithWildcard
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }
		
		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0; }
	}
	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.ox.cs.MDML.QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//	QualifiedName '.*'?;
		@Override public ParserRule getRule() { return rule; }
		
		//QualifiedName '.*'?
		public Group getGroup() { return cGroup; }
		
		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }
		
		//'.*'?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}
	public class DataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.ox.cs.MDML.DataType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimitiveTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cReferenceTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEnumeratedTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//DataType:
		//	PrimitiveType | ReferenceType | EnumeratedType;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimitiveType | ReferenceType | EnumeratedType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PrimitiveType
		public RuleCall getPrimitiveTypeParserRuleCall_0() { return cPrimitiveTypeParserRuleCall_0; }
		
		//ReferenceType
		public RuleCall getReferenceTypeParserRuleCall_1() { return cReferenceTypeParserRuleCall_1; }
		
		//EnumeratedType
		public RuleCall getEnumeratedTypeParserRuleCall_2() { return cEnumeratedTypeParserRuleCall_2; }
	}
	public class EnumeratedTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.ox.cs.MDML.EnumeratedType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumtypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cStatusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatusAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatusStatusParserRuleCall_2_0 = (RuleCall)cStatusAssignment_2.eContents().get(0);
		private final Keyword cDomainidKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cGuidAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cGuidGUIDParserRuleCall_4_0 = (RuleCall)cGuidAssignment_4.eContents().get(0);
		private final Keyword cCommercialAtKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final RuleCall cVersionParserRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cRefinesAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cRefinesREFINEParserRuleCall_9_0 = (RuleCall)cRefinesAssignment_9.eContents().get(0);
		private final Assignment cNameAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cNameQualifiedNameParserRuleCall_10_0 = (RuleCall)cNameAssignment_10.eContents().get(0);
		private final Keyword cColonKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cTypeAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cTypePrimitiveTypeParserRuleCall_12_0 = (RuleCall)cTypeAssignment_12.eContents().get(0);
		private final Group cGroup_13 = (Group)cGroup.eContents().get(13);
		private final Assignment cArrayAssignment_13_0 = (Assignment)cGroup_13.eContents().get(0);
		private final Keyword cArrayLeftSquareBracketKeyword_13_0_0 = (Keyword)cArrayAssignment_13_0.eContents().get(0);
		private final Assignment cLengthAssignment_13_1 = (Assignment)cGroup_13.eContents().get(1);
		private final RuleCall cLengthINTTerminalRuleCall_13_1_0 = (RuleCall)cLengthAssignment_13_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_13_2 = (Keyword)cGroup_13.eContents().get(2);
		
		//EnumeratedType:
		//	'enumtype' 'status:' status=Status 'domainid:' guid=GUID '@' '(' Version ')' refines=REFINE name=QualifiedName ':'
		//	type=PrimitiveType (array?='[' length=INT? ']')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'enumtype' 'status:' status=Status 'domainid:' guid=GUID '@' '(' Version ')' refines=REFINE name=QualifiedName ':'
		//type=PrimitiveType (array?='[' length=INT? ']')?
		public Group getGroup() { return cGroup; }
		
		//'enumtype'
		public Keyword getEnumtypeKeyword_0() { return cEnumtypeKeyword_0; }
		
		//'status:'
		public Keyword getStatusKeyword_1() { return cStatusKeyword_1; }
		
		//status=Status
		public Assignment getStatusAssignment_2() { return cStatusAssignment_2; }
		
		//Status
		public RuleCall getStatusStatusParserRuleCall_2_0() { return cStatusStatusParserRuleCall_2_0; }
		
		//'domainid:'
		public Keyword getDomainidKeyword_3() { return cDomainidKeyword_3; }
		
		//guid=GUID
		public Assignment getGuidAssignment_4() { return cGuidAssignment_4; }
		
		//GUID
		public RuleCall getGuidGUIDParserRuleCall_4_0() { return cGuidGUIDParserRuleCall_4_0; }
		
		//'@'
		public Keyword getCommercialAtKeyword_5() { return cCommercialAtKeyword_5; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6() { return cLeftParenthesisKeyword_6; }
		
		//Version
		public RuleCall getVersionParserRuleCall_7() { return cVersionParserRuleCall_7; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
		
		//refines=REFINE
		public Assignment getRefinesAssignment_9() { return cRefinesAssignment_9; }
		
		//REFINE
		public RuleCall getRefinesREFINEParserRuleCall_9_0() { return cRefinesREFINEParserRuleCall_9_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_10() { return cNameAssignment_10; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_10_0() { return cNameQualifiedNameParserRuleCall_10_0; }
		
		//':'
		public Keyword getColonKeyword_11() { return cColonKeyword_11; }
		
		//type=PrimitiveType
		public Assignment getTypeAssignment_12() { return cTypeAssignment_12; }
		
		//PrimitiveType
		public RuleCall getTypePrimitiveTypeParserRuleCall_12_0() { return cTypePrimitiveTypeParserRuleCall_12_0; }
		
		//(array?='[' length=INT? ']')?
		public Group getGroup_13() { return cGroup_13; }
		
		//array?='['
		public Assignment getArrayAssignment_13_0() { return cArrayAssignment_13_0; }
		
		//'['
		public Keyword getArrayLeftSquareBracketKeyword_13_0_0() { return cArrayLeftSquareBracketKeyword_13_0_0; }
		
		//length=INT?
		public Assignment getLengthAssignment_13_1() { return cLengthAssignment_13_1; }
		
		//INT
		public RuleCall getLengthINTTerminalRuleCall_13_1_0() { return cLengthINTTerminalRuleCall_13_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_13_2() { return cRightSquareBracketKeyword_13_2; }
	}
	public class ReferenceTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.ox.cs.MDML.ReferenceType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReftypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cStatusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatusAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatusStatusParserRuleCall_2_0 = (RuleCall)cStatusAssignment_2.eContents().get(0);
		private final Keyword cDomainidKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cGuidAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cGuidGUIDParserRuleCall_4_0 = (RuleCall)cGuidAssignment_4.eContents().get(0);
		private final Keyword cCommercialAtKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final RuleCall cVersionParserRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cRefinesAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cRefinesREFINEParserRuleCall_9_0 = (RuleCall)cRefinesAssignment_9.eContents().get(0);
		private final Assignment cNameAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cNameQualifiedNameParserRuleCall_10_0 = (RuleCall)cNameAssignment_10.eContents().get(0);
		private final Keyword cColonKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cTypeAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final CrossReference cTypeDataClassCrossReference_12_0 = (CrossReference)cTypeAssignment_12.eContents().get(0);
		private final RuleCall cTypeDataClassIDTerminalRuleCall_12_0_1 = (RuleCall)cTypeDataClassCrossReference_12_0.eContents().get(1);
		
		//ReferenceType:
		//	'reftype' 'status:' status=Status 'domainid:' guid=GUID '@' '(' Version ')' refines=REFINE name=QualifiedName ':'
		//	type=[DataClass];
		@Override public ParserRule getRule() { return rule; }
		
		//'reftype' 'status:' status=Status 'domainid:' guid=GUID '@' '(' Version ')' refines=REFINE name=QualifiedName ':'
		//type=[DataClass]
		public Group getGroup() { return cGroup; }
		
		//'reftype'
		public Keyword getReftypeKeyword_0() { return cReftypeKeyword_0; }
		
		//'status:'
		public Keyword getStatusKeyword_1() { return cStatusKeyword_1; }
		
		//status=Status
		public Assignment getStatusAssignment_2() { return cStatusAssignment_2; }
		
		//Status
		public RuleCall getStatusStatusParserRuleCall_2_0() { return cStatusStatusParserRuleCall_2_0; }
		
		//'domainid:'
		public Keyword getDomainidKeyword_3() { return cDomainidKeyword_3; }
		
		//guid=GUID
		public Assignment getGuidAssignment_4() { return cGuidAssignment_4; }
		
		//GUID
		public RuleCall getGuidGUIDParserRuleCall_4_0() { return cGuidGUIDParserRuleCall_4_0; }
		
		//'@'
		public Keyword getCommercialAtKeyword_5() { return cCommercialAtKeyword_5; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6() { return cLeftParenthesisKeyword_6; }
		
		//Version
		public RuleCall getVersionParserRuleCall_7() { return cVersionParserRuleCall_7; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
		
		//refines=REFINE
		public Assignment getRefinesAssignment_9() { return cRefinesAssignment_9; }
		
		//REFINE
		public RuleCall getRefinesREFINEParserRuleCall_9_0() { return cRefinesREFINEParserRuleCall_9_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_10() { return cNameAssignment_10; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_10_0() { return cNameQualifiedNameParserRuleCall_10_0; }
		
		//':'
		public Keyword getColonKeyword_11() { return cColonKeyword_11; }
		
		//type=[DataClass]
		public Assignment getTypeAssignment_12() { return cTypeAssignment_12; }
		
		//[DataClass]
		public CrossReference getTypeDataClassCrossReference_12_0() { return cTypeDataClassCrossReference_12_0; }
		
		//ID
		public RuleCall getTypeDataClassIDTerminalRuleCall_12_0_1() { return cTypeDataClassIDTerminalRuleCall_12_0_1; }
	}
	public class PrimitiveTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.ox.cs.MDML.PrimitiveType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrimitiveTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cDatatypeKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cStatusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cStatusAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cStatusStatusParserRuleCall_1_2_0 = (RuleCall)cStatusAssignment_1_2.eContents().get(0);
		private final Keyword cDomainidKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cGuidAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cGuidGUIDParserRuleCall_1_4_0 = (RuleCall)cGuidAssignment_1_4.eContents().get(0);
		private final Keyword cCommercialAtKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		private final RuleCall cVersionParserRuleCall_1_7 = (RuleCall)cGroup_1.eContents().get(7);
		private final Keyword cRightParenthesisKeyword_1_8 = (Keyword)cGroup_1.eContents().get(8);
		private final Assignment cRefinesAssignment_1_9 = (Assignment)cGroup_1.eContents().get(9);
		private final RuleCall cRefinesREFINEParserRuleCall_1_9_0 = (RuleCall)cRefinesAssignment_1_9.eContents().get(0);
		private final Assignment cNameAssignment_1_10 = (Assignment)cGroup_1.eContents().get(10);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_10_0 = (RuleCall)cNameAssignment_1_10.eContents().get(0);
		private final Keyword cColonKeyword_1_11 = (Keyword)cGroup_1.eContents().get(11);
		private final Assignment cTypeAssignment_1_12 = (Assignment)cGroup_1.eContents().get(12);
		private final RuleCall cTypeBasicParserRuleCall_1_12_0 = (RuleCall)cTypeAssignment_1_12.eContents().get(0);
		private final Assignment cRuleAssignment_1_13 = (Assignment)cGroup_1.eContents().get(13);
		private final CrossReference cRuleConstraintCrossReference_1_13_0 = (CrossReference)cRuleAssignment_1_13.eContents().get(0);
		private final RuleCall cRuleConstraintIDTerminalRuleCall_1_13_0_1 = (RuleCall)cRuleConstraintCrossReference_1_13_0.eContents().get(1);
		
		//PrimitiveType:
		//	{PrimitiveType} ('datatype' 'status:' status=Status 'domainid:' guid=GUID '@' '(' Version ')' refines=REFINE
		//	name=QualifiedName ':' type=Basic rule=[Constraint]?);
		@Override public ParserRule getRule() { return rule; }
		
		//{PrimitiveType} ('datatype' 'status:' status=Status 'domainid:' guid=GUID '@' '(' Version ')' refines=REFINE
		//name=QualifiedName ':' type=Basic rule=[Constraint]?)
		public Group getGroup() { return cGroup; }
		
		//{PrimitiveType}
		public Action getPrimitiveTypeAction_0() { return cPrimitiveTypeAction_0; }
		
		//'datatype' 'status:' status=Status 'domainid:' guid=GUID '@' '(' Version ')' refines=REFINE name=QualifiedName ':'
		//type=Basic rule=[Constraint]?
		public Group getGroup_1() { return cGroup_1; }
		
		//'datatype'
		public Keyword getDatatypeKeyword_1_0() { return cDatatypeKeyword_1_0; }
		
		//'status:'
		public Keyword getStatusKeyword_1_1() { return cStatusKeyword_1_1; }
		
		//status=Status
		public Assignment getStatusAssignment_1_2() { return cStatusAssignment_1_2; }
		
		//Status
		public RuleCall getStatusStatusParserRuleCall_1_2_0() { return cStatusStatusParserRuleCall_1_2_0; }
		
		//'domainid:'
		public Keyword getDomainidKeyword_1_3() { return cDomainidKeyword_1_3; }
		
		//guid=GUID
		public Assignment getGuidAssignment_1_4() { return cGuidAssignment_1_4; }
		
		//GUID
		public RuleCall getGuidGUIDParserRuleCall_1_4_0() { return cGuidGUIDParserRuleCall_1_4_0; }
		
		//'@'
		public Keyword getCommercialAtKeyword_1_5() { return cCommercialAtKeyword_1_5; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_6() { return cLeftParenthesisKeyword_1_6; }
		
		//Version
		public RuleCall getVersionParserRuleCall_1_7() { return cVersionParserRuleCall_1_7; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_8() { return cRightParenthesisKeyword_1_8; }
		
		//refines=REFINE
		public Assignment getRefinesAssignment_1_9() { return cRefinesAssignment_1_9; }
		
		//REFINE
		public RuleCall getRefinesREFINEParserRuleCall_1_9_0() { return cRefinesREFINEParserRuleCall_1_9_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1_10() { return cNameAssignment_1_10; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_10_0() { return cNameQualifiedNameParserRuleCall_1_10_0; }
		
		//':'
		public Keyword getColonKeyword_1_11() { return cColonKeyword_1_11; }
		
		//type=Basic
		public Assignment getTypeAssignment_1_12() { return cTypeAssignment_1_12; }
		
		//Basic
		public RuleCall getTypeBasicParserRuleCall_1_12_0() { return cTypeBasicParserRuleCall_1_12_0; }
		
		//rule=[Constraint]?
		public Assignment getRuleAssignment_1_13() { return cRuleAssignment_1_13; }
		
		//[Constraint]
		public CrossReference getRuleConstraintCrossReference_1_13_0() { return cRuleConstraintCrossReference_1_13_0; }
		
		//ID
		public RuleCall getRuleConstraintIDTerminalRuleCall_1_13_0_1() { return cRuleConstraintIDTerminalRuleCall_1_13_0_1; }
	}
	public class BasicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.ox.cs.MDML.Basic");
		private final Assignment cTypenameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTypenameAlternatives_0 = (Alternatives)cTypenameAssignment.eContents().get(0);
		private final Keyword cTypenameSTRINGKeyword_0_0 = (Keyword)cTypenameAlternatives_0.eContents().get(0);
		private final Keyword cTypenameINTKeyword_0_1 = (Keyword)cTypenameAlternatives_0.eContents().get(1);
		private final Keyword cTypenameBOOLEANKeyword_0_2 = (Keyword)cTypenameAlternatives_0.eContents().get(2);
		
		//Basic:
		//	typename=('STRING' | 'INT' | 'BOOLEAN');
		@Override public ParserRule getRule() { return rule; }
		
		//typename=('STRING' | 'INT' | 'BOOLEAN')
		public Assignment getTypenameAssignment() { return cTypenameAssignment; }
		
		//('STRING' | 'INT' | 'BOOLEAN')
		public Alternatives getTypenameAlternatives_0() { return cTypenameAlternatives_0; }
		
		//'STRING'
		public Keyword getTypenameSTRINGKeyword_0_0() { return cTypenameSTRINGKeyword_0_0; }
		
		//'INT'
		public Keyword getTypenameINTKeyword_0_1() { return cTypenameINTKeyword_0_1; }
		
		//'BOOLEAN'
		public Keyword getTypenameBOOLEANKeyword_0_2() { return cTypenameBOOLEANKeyword_0_2; }
	}
	public class BOOLEANElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.ox.cs.MDML.BOOLEAN");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cDigitZeroKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cDigitOneKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//BOOLEAN:
		//	'0' | '1';
		@Override public ParserRule getRule() { return rule; }
		
		//'0' | '1'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'0'
		public Keyword getDigitZeroKeyword_0() { return cDigitZeroKeyword_0; }
		
		//'1'
		public Keyword getDigitOneKeyword_1() { return cDigitOneKeyword_1; }
	}
	public class ContainerElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.ox.cs.MDML.ContainerElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDataClassParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDataElementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cReferenceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ContainerElement:
		//	DataClass | DataElement | Reference;
		@Override public ParserRule getRule() { return rule; }
		
		//DataClass | DataElement | Reference
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DataClass
		public RuleCall getDataClassParserRuleCall_0() { return cDataClassParserRuleCall_0; }
		
		//DataElement
		public RuleCall getDataElementParserRuleCall_1() { return cDataElementParserRuleCall_1; }
		
		//Reference
		public RuleCall getReferenceParserRuleCall_2() { return cReferenceParserRuleCall_2; }
	}
	public class DataClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.ox.cs.MDML.DataClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDataClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cStatusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatusAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatusStatusParserRuleCall_2_0 = (RuleCall)cStatusAssignment_2.eContents().get(0);
		private final Keyword cDomainidKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cGuidAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cGuidGUIDParserRuleCall_4_0 = (RuleCall)cGuidAssignment_4.eContents().get(0);
		private final Keyword cCommercialAtKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final RuleCall cVersionParserRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cRefinesAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cRefinesREFINEParserRuleCall_9_0 = (RuleCall)cRefinesAssignment_9.eContents().get(0);
		private final Assignment cNameAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cNameQualifiedNameParserRuleCall_10_0 = (RuleCall)cNameAssignment_10.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cDataelementsAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cDataelementsContainerElementParserRuleCall_12_0 = (RuleCall)cDataelementsAssignment_12.eContents().get(0);
		private final Assignment cExtensionAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cExtensionExtensionItemParserRuleCall_13_0 = (RuleCall)cExtensionAssignment_13.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_14 = (Keyword)cGroup.eContents().get(14);
		
		//DataClass:
		//	'DataClass' 'status:' status=Status 'domainid:' guid=GUID '@' '(' Version ')' refines=REFINE name=QualifiedName '{'
		//	dataelements+=ContainerElement*
		//	extension+=ExtensionItem*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'DataClass' 'status:' status=Status 'domainid:' guid=GUID '@' '(' Version ')' refines=REFINE name=QualifiedName '{'
		//dataelements+=ContainerElement* extension+=ExtensionItem* '}'
		public Group getGroup() { return cGroup; }
		
		//'DataClass'
		public Keyword getDataClassKeyword_0() { return cDataClassKeyword_0; }
		
		//'status:'
		public Keyword getStatusKeyword_1() { return cStatusKeyword_1; }
		
		//status=Status
		public Assignment getStatusAssignment_2() { return cStatusAssignment_2; }
		
		//Status
		public RuleCall getStatusStatusParserRuleCall_2_0() { return cStatusStatusParserRuleCall_2_0; }
		
		//'domainid:'
		public Keyword getDomainidKeyword_3() { return cDomainidKeyword_3; }
		
		//guid=GUID
		public Assignment getGuidAssignment_4() { return cGuidAssignment_4; }
		
		//GUID
		public RuleCall getGuidGUIDParserRuleCall_4_0() { return cGuidGUIDParserRuleCall_4_0; }
		
		//'@'
		public Keyword getCommercialAtKeyword_5() { return cCommercialAtKeyword_5; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6() { return cLeftParenthesisKeyword_6; }
		
		//Version
		public RuleCall getVersionParserRuleCall_7() { return cVersionParserRuleCall_7; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
		
		//refines=REFINE
		public Assignment getRefinesAssignment_9() { return cRefinesAssignment_9; }
		
		//REFINE
		public RuleCall getRefinesREFINEParserRuleCall_9_0() { return cRefinesREFINEParserRuleCall_9_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_10() { return cNameAssignment_10; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_10_0() { return cNameQualifiedNameParserRuleCall_10_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_11() { return cLeftCurlyBracketKeyword_11; }
		
		//dataelements+=ContainerElement*
		public Assignment getDataelementsAssignment_12() { return cDataelementsAssignment_12; }
		
		//ContainerElement
		public RuleCall getDataelementsContainerElementParserRuleCall_12_0() { return cDataelementsContainerElementParserRuleCall_12_0; }
		
		//extension+=ExtensionItem*
		public Assignment getExtensionAssignment_13() { return cExtensionAssignment_13; }
		
		//ExtensionItem
		public RuleCall getExtensionExtensionItemParserRuleCall_13_0() { return cExtensionExtensionItemParserRuleCall_13_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_14() { return cRightCurlyBracketKeyword_14; }
	}
	public class DataElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.ox.cs.MDML.DataElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDataElementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cStatusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatusAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatusStatusParserRuleCall_2_0 = (RuleCall)cStatusAssignment_2.eContents().get(0);
		private final Keyword cDomainidKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cGuidAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cGuidGUIDParserRuleCall_4_0 = (RuleCall)cGuidAssignment_4.eContents().get(0);
		private final Keyword cCommercialAtKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final RuleCall cVersionParserRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cRefinesAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cRefinesREFINEParserRuleCall_9_0 = (RuleCall)cRefinesAssignment_9.eContents().get(0);
		private final Assignment cNameAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cNameQualifiedNameParserRuleCall_10_0 = (RuleCall)cNameAssignment_10.eContents().get(0);
		private final Keyword cColonKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cTypeAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final CrossReference cTypeDataTypeCrossReference_12_0 = (CrossReference)cTypeAssignment_12.eContents().get(0);
		private final RuleCall cTypeDataTypeQualifiedNameParserRuleCall_12_0_1 = (RuleCall)cTypeDataTypeCrossReference_12_0.eContents().get(1);
		
		//DataElement:
		//	'DataElement' 'status:' status=Status 'domainid:' guid=GUID '@' '(' Version ')' refines=REFINE name=QualifiedName ':'
		//	type=[DataType|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//'DataElement' 'status:' status=Status 'domainid:' guid=GUID '@' '(' Version ')' refines=REFINE name=QualifiedName ':'
		//type=[DataType|QualifiedName]
		public Group getGroup() { return cGroup; }
		
		//'DataElement'
		public Keyword getDataElementKeyword_0() { return cDataElementKeyword_0; }
		
		//'status:'
		public Keyword getStatusKeyword_1() { return cStatusKeyword_1; }
		
		//status=Status
		public Assignment getStatusAssignment_2() { return cStatusAssignment_2; }
		
		//Status
		public RuleCall getStatusStatusParserRuleCall_2_0() { return cStatusStatusParserRuleCall_2_0; }
		
		//'domainid:'
		public Keyword getDomainidKeyword_3() { return cDomainidKeyword_3; }
		
		//guid=GUID
		public Assignment getGuidAssignment_4() { return cGuidAssignment_4; }
		
		//GUID
		public RuleCall getGuidGUIDParserRuleCall_4_0() { return cGuidGUIDParserRuleCall_4_0; }
		
		//'@'
		public Keyword getCommercialAtKeyword_5() { return cCommercialAtKeyword_5; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6() { return cLeftParenthesisKeyword_6; }
		
		//Version
		public RuleCall getVersionParserRuleCall_7() { return cVersionParserRuleCall_7; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
		
		//refines=REFINE
		public Assignment getRefinesAssignment_9() { return cRefinesAssignment_9; }
		
		//REFINE
		public RuleCall getRefinesREFINEParserRuleCall_9_0() { return cRefinesREFINEParserRuleCall_9_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_10() { return cNameAssignment_10; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_10_0() { return cNameQualifiedNameParserRuleCall_10_0; }
		
		//':'
		public Keyword getColonKeyword_11() { return cColonKeyword_11; }
		
		//type=[DataType|QualifiedName]
		public Assignment getTypeAssignment_12() { return cTypeAssignment_12; }
		
		//[DataType|QualifiedName]
		public CrossReference getTypeDataTypeCrossReference_12_0() { return cTypeDataTypeCrossReference_12_0; }
		
		//QualifiedName
		public RuleCall getTypeDataTypeQualifiedNameParserRuleCall_12_0_1() { return cTypeDataTypeQualifiedNameParserRuleCall_12_0_1; }
	}
	public class StatusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.ox.cs.MDML.Status");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cDraftKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFinalizedKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cSupercededKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//Status:
		//	'draft' | 'finalized' | 'superceded';
		@Override public ParserRule getRule() { return rule; }
		
		//'draft' | 'finalized' | 'superceded'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'draft'
		public Keyword getDraftKeyword_0() { return cDraftKeyword_0; }
		
		//'finalized'
		public Keyword getFinalizedKeyword_1() { return cFinalizedKeyword_1; }
		
		//'superceded'
		public Keyword getSupercededKeyword_2() { return cSupercededKeyword_2; }
	}
	public class ConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.ox.cs.MDML.Constraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConstraintAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cConstraintKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cGroup_4.eContents().get(0);
		private final Assignment cSrcAssignment_4_0_0 = (Assignment)cGroup_4_0.eContents().get(0);
		private final RuleCall cSrcDataElementParserRuleCall_4_0_0_0 = (RuleCall)cSrcAssignment_4_0_0.eContents().get(0);
		private final Keyword cColonKeyword_4_0_1 = (Keyword)cGroup_4_0.eContents().get(1);
		private final Assignment cPredAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cPredPredicateCrossReference_4_1_0 = (CrossReference)cPredAssignment_4_1.eContents().get(0);
		private final RuleCall cPredPredicateIDTerminalRuleCall_4_1_0_1 = (RuleCall)cPredPredicateCrossReference_4_1_0.eContents().get(1);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cColonKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cDestAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cDestDataElementParserRuleCall_4_2_1_0 = (RuleCall)cDestAssignment_4_2_1.eContents().get(0);
		
		//Constraint:
		//	{Constraint} 'constraint' name=QualifiedName '=' ((src=DataElement ':')? pred=[Predicate] (':' dest=DataElement)?);
		@Override public ParserRule getRule() { return rule; }
		
		//{Constraint} 'constraint' name=QualifiedName '=' ((src=DataElement ':')? pred=[Predicate] (':' dest=DataElement)?)
		public Group getGroup() { return cGroup; }
		
		//{Constraint}
		public Action getConstraintAction_0() { return cConstraintAction_0; }
		
		//'constraint'
		public Keyword getConstraintKeyword_1() { return cConstraintKeyword_1; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_2_0() { return cNameQualifiedNameParserRuleCall_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//(src=DataElement ':')? pred=[Predicate] (':' dest=DataElement)?
		public Group getGroup_4() { return cGroup_4; }
		
		//(src=DataElement ':')?
		public Group getGroup_4_0() { return cGroup_4_0; }
		
		//src=DataElement
		public Assignment getSrcAssignment_4_0_0() { return cSrcAssignment_4_0_0; }
		
		//DataElement
		public RuleCall getSrcDataElementParserRuleCall_4_0_0_0() { return cSrcDataElementParserRuleCall_4_0_0_0; }
		
		//':'
		public Keyword getColonKeyword_4_0_1() { return cColonKeyword_4_0_1; }
		
		//pred=[Predicate]
		public Assignment getPredAssignment_4_1() { return cPredAssignment_4_1; }
		
		//[Predicate]
		public CrossReference getPredPredicateCrossReference_4_1_0() { return cPredPredicateCrossReference_4_1_0; }
		
		//ID
		public RuleCall getPredPredicateIDTerminalRuleCall_4_1_0_1() { return cPredPredicateIDTerminalRuleCall_4_1_0_1; }
		
		//(':' dest=DataElement)?
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//':'
		public Keyword getColonKeyword_4_2_0() { return cColonKeyword_4_2_0; }
		
		//dest=DataElement
		public Assignment getDestAssignment_4_2_1() { return cDestAssignment_4_2_1; }
		
		//DataElement
		public RuleCall getDestDataElementParserRuleCall_4_2_1_0() { return cDestDataElementParserRuleCall_4_2_1_0; }
	}
	public class PredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.ox.cs.MDML.Predicate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPredicateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPredicateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPredicateSTRINGTerminalRuleCall_3_0 = (RuleCall)cPredicateAssignment_3.eContents().get(0);
		
		//Predicate:
		//	'predicate' name=QualifiedName ':' predicate=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'predicate' name=QualifiedName ':' predicate=STRING
		public Group getGroup() { return cGroup; }
		
		//'predicate'
		public Keyword getPredicateKeyword_0() { return cPredicateKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//predicate=STRING
		public Assignment getPredicateAssignment_3() { return cPredicateAssignment_3; }
		
		//STRING
		public RuleCall getPredicateSTRINGTerminalRuleCall_3_0() { return cPredicateSTRINGTerminalRuleCall_3_0; }
	}
	
	
	private final DomainRegistryElements pDomainRegistry;
	private final DataModelElements pDataModel;
	private final DataItemElements pDataItem;
	private final REFINEElements pREFINE;
	private final REFINESElements pREFINES;
	private final DOESNOTREFINEElements pDOESNOTREFINE;
	private final QualifiedNameElements pQualifiedName;
	private final PathElements pPath;
	private final GUIDElements pGUID;
	private final VersionElements pVersion;
	private final ReferenceElements pReference;
	private final RelationSourceElements pRelationSource;
	private final RelationDestinationElements pRelationDestination;
	private final RelationshipElements pRelationship;
	private final ExtensionItemElements pExtensionItem;
	private final ImportElements pImport;
	private final QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private final DataTypeElements pDataType;
	private final EnumeratedTypeElements pEnumeratedType;
	private final ReferenceTypeElements pReferenceType;
	private final PrimitiveTypeElements pPrimitiveType;
	private final BasicElements pBasic;
	private final BOOLEANElements pBOOLEAN;
	private final ContainerElementElements pContainerElement;
	private final DataClassElements pDataClass;
	private final DataElementElements pDataElement;
	private final StatusElements pStatus;
	private final ConstraintElements pConstraint;
	private final PredicateElements pPredicate;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MDMLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDomainRegistry = new DomainRegistryElements();
		this.pDataModel = new DataModelElements();
		this.pDataItem = new DataItemElements();
		this.pREFINE = new REFINEElements();
		this.pREFINES = new REFINESElements();
		this.pDOESNOTREFINE = new DOESNOTREFINEElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pPath = new PathElements();
		this.pGUID = new GUIDElements();
		this.pVersion = new VersionElements();
		this.pReference = new ReferenceElements();
		this.pRelationSource = new RelationSourceElements();
		this.pRelationDestination = new RelationDestinationElements();
		this.pRelationship = new RelationshipElements();
		this.pExtensionItem = new ExtensionItemElements();
		this.pImport = new ImportElements();
		this.pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements();
		this.pDataType = new DataTypeElements();
		this.pEnumeratedType = new EnumeratedTypeElements();
		this.pReferenceType = new ReferenceTypeElements();
		this.pPrimitiveType = new PrimitiveTypeElements();
		this.pBasic = new BasicElements();
		this.pBOOLEAN = new BOOLEANElements();
		this.pContainerElement = new ContainerElementElements();
		this.pDataClass = new DataClassElements();
		this.pDataElement = new DataElementElements();
		this.pStatus = new StatusElements();
		this.pConstraint = new ConstraintElements();
		this.pPredicate = new PredicateElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("uk.ac.ox.cs.MDML".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//DomainRegistry:
	//	registeredItems+=DataModel*;
	public DomainRegistryElements getDomainRegistryAccess() {
		return pDomainRegistry;
	}
	
	public ParserRule getDomainRegistryRule() {
		return getDomainRegistryAccess().getRule();
	}
	
	//DataModel:
	//	'DataModel' name=QualifiedName 'status:' status=Status 'domainid:' guid=GUID '@' '(' Version ')' refines=REFINE '{'
	//	elements+=DataItem*
	//	relations+=Relationship*
	//	constraint+=Constraint*
	//	predicate+=Predicate*
	//	'}';
	public DataModelElements getDataModelAccess() {
		return pDataModel;
	}
	
	public ParserRule getDataModelRule() {
		return getDataModelAccess().getRule();
	}
	
	//DataItem:
	//	dataitem=(DataModel | DataClass | DataElement | DataType | Import | ExtensionItem);
	public DataItemElements getDataItemAccess() {
		return pDataItem;
	}
	
	public ParserRule getDataItemRule() {
		return getDataItemAccess().getRule();
	}
	
	//REFINE:
	//	(REFINES | DOESNOTREFINE)?;
	public REFINEElements getREFINEAccess() {
		return pREFINE;
	}
	
	public ParserRule getREFINERule() {
		return getREFINEAccess().getRule();
	}
	
	//REFINES:
	//	'refines' ':' Path;
	public REFINESElements getREFINESAccess() {
		return pREFINES;
	}
	
	public ParserRule getREFINESRule() {
		return getREFINESAccess().getRule();
	}
	
	//DOESNOTREFINE:
	//	'doesnotrefine' ':' Path;
	public DOESNOTREFINEElements getDOESNOTREFINEAccess() {
		return pDOESNOTREFINE;
	}
	
	public ParserRule getDOESNOTREFINERule() {
		return getDOESNOTREFINEAccess().getRule();
	}
	
	//QualifiedName:
	//	ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//Path:
	//	QualifiedName ('/' QualifiedName)*;
	public PathElements getPathAccess() {
		return pPath;
	}
	
	public ParserRule getPathRule() {
		return getPathAccess().getRule();
	}
	
	//GUID:
	//	ID ('.' ID | '/' ID)*;
	public GUIDElements getGUIDAccess() {
		return pGUID;
	}
	
	public ParserRule getGUIDRule() {
		return getGUIDAccess().getRule();
	}
	
	//Version:
	//	INT '.' INT '.' INT;
	public VersionElements getVersionAccess() {
		return pVersion;
	}
	
	public ParserRule getVersionRule() {
		return getVersionAccess().getRule();
	}
	
	//Reference:
	//	"ref" name=ID ":" type=[DataItem];
	public ReferenceElements getReferenceAccess() {
		return pReference;
	}
	
	public ParserRule getReferenceRule() {
		return getReferenceAccess().getRule();
	}
	
	//RelationSource:
	//	DataModel | DataClass | DataElement | DataType;
	public RelationSourceElements getRelationSourceAccess() {
		return pRelationSource;
	}
	
	public ParserRule getRelationSourceRule() {
		return getRelationSourceAccess().getRule();
	}
	
	//RelationDestination:
	//	DataModel | DataClass | DataElement | DataType;
	public RelationDestinationElements getRelationDestinationAccess() {
		return pRelationDestination;
	}
	
	public ParserRule getRelationDestinationRule() {
		return getRelationDestinationAccess().getRule();
	}
	
	//Relationship:
	//	'relationship' (src=RelationSource ':' dest=RelationDestination);
	public RelationshipElements getRelationshipAccess() {
		return pRelationship;
	}
	
	public ParserRule getRelationshipRule() {
		return getRelationshipAccess().getRule();
	}
	
	//ExtensionItem:
	//	'extension' key=ID '=' value=STRING ';';
	public ExtensionItemElements getExtensionItemAccess() {
		return pExtensionItem;
	}
	
	public ParserRule getExtensionItemRule() {
		return getExtensionItemAccess().getRule();
	}
	
	//Import:
	//	'import' importedNamespace=QualifiedNameWithWildcard;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//	QualifiedName '.*'?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return pQualifiedNameWithWildcard;
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//DataType:
	//	PrimitiveType | ReferenceType | EnumeratedType;
	public DataTypeElements getDataTypeAccess() {
		return pDataType;
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}
	
	//EnumeratedType:
	//	'enumtype' 'status:' status=Status 'domainid:' guid=GUID '@' '(' Version ')' refines=REFINE name=QualifiedName ':'
	//	type=PrimitiveType (array?='[' length=INT? ']')?;
	public EnumeratedTypeElements getEnumeratedTypeAccess() {
		return pEnumeratedType;
	}
	
	public ParserRule getEnumeratedTypeRule() {
		return getEnumeratedTypeAccess().getRule();
	}
	
	//ReferenceType:
	//	'reftype' 'status:' status=Status 'domainid:' guid=GUID '@' '(' Version ')' refines=REFINE name=QualifiedName ':'
	//	type=[DataClass];
	public ReferenceTypeElements getReferenceTypeAccess() {
		return pReferenceType;
	}
	
	public ParserRule getReferenceTypeRule() {
		return getReferenceTypeAccess().getRule();
	}
	
	//PrimitiveType:
	//	{PrimitiveType} ('datatype' 'status:' status=Status 'domainid:' guid=GUID '@' '(' Version ')' refines=REFINE
	//	name=QualifiedName ':' type=Basic rule=[Constraint]?);
	public PrimitiveTypeElements getPrimitiveTypeAccess() {
		return pPrimitiveType;
	}
	
	public ParserRule getPrimitiveTypeRule() {
		return getPrimitiveTypeAccess().getRule();
	}
	
	//Basic:
	//	typename=('STRING' | 'INT' | 'BOOLEAN');
	public BasicElements getBasicAccess() {
		return pBasic;
	}
	
	public ParserRule getBasicRule() {
		return getBasicAccess().getRule();
	}
	
	//BOOLEAN:
	//	'0' | '1';
	public BOOLEANElements getBOOLEANAccess() {
		return pBOOLEAN;
	}
	
	public ParserRule getBOOLEANRule() {
		return getBOOLEANAccess().getRule();
	}
	
	//ContainerElement:
	//	DataClass | DataElement | Reference;
	public ContainerElementElements getContainerElementAccess() {
		return pContainerElement;
	}
	
	public ParserRule getContainerElementRule() {
		return getContainerElementAccess().getRule();
	}
	
	//DataClass:
	//	'DataClass' 'status:' status=Status 'domainid:' guid=GUID '@' '(' Version ')' refines=REFINE name=QualifiedName '{'
	//	dataelements+=ContainerElement*
	//	extension+=ExtensionItem*
	//	'}';
	public DataClassElements getDataClassAccess() {
		return pDataClass;
	}
	
	public ParserRule getDataClassRule() {
		return getDataClassAccess().getRule();
	}
	
	//DataElement:
	//	'DataElement' 'status:' status=Status 'domainid:' guid=GUID '@' '(' Version ')' refines=REFINE name=QualifiedName ':'
	//	type=[DataType|QualifiedName];
	public DataElementElements getDataElementAccess() {
		return pDataElement;
	}
	
	public ParserRule getDataElementRule() {
		return getDataElementAccess().getRule();
	}
	
	//Status:
	//	'draft' | 'finalized' | 'superceded';
	public StatusElements getStatusAccess() {
		return pStatus;
	}
	
	public ParserRule getStatusRule() {
		return getStatusAccess().getRule();
	}
	
	//Constraint:
	//	{Constraint} 'constraint' name=QualifiedName '=' ((src=DataElement ':')? pred=[Predicate] (':' dest=DataElement)?);
	public ConstraintElements getConstraintAccess() {
		return pConstraint;
	}
	
	public ParserRule getConstraintRule() {
		return getConstraintAccess().getRule();
	}
	
	//Predicate:
	//	'predicate' name=QualifiedName ':' predicate=STRING;
	public PredicateElements getPredicateAccess() {
		return pPredicate;
	}
	
	public ParserRule getPredicateRule() {
		return getPredicateAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
