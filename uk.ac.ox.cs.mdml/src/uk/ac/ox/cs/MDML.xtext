grammar uk.ac.ox.cs.MDML with org.eclipse.xtext.common.Terminals

generate mDML "http://www.ac.uk/ox/cs/MDML"

DomainRegistry :
	{DomainRegistry} (registeredItems += Model)*
;

Model:
	model = (ConceptModel|DataModel)
;

Concept:
	'Concept' name = QualifiedName 'status:' status = Status 'domainid:' guid = GUID'@' '(' Version ')'  ('extends' superType=[Concept])? '{'
	  (descriptors += Term)*
	  (relations += Reference)*
	 '}'
;


Term:
	'Term' 'status:' status = Status 'domainid:' guid = GUID  '@' '(' Version ')' 
	name = QualifiedName 
;


ConceptModel:
	'ConceptModel' name = Path 'status:' status = Status 'domainid:' guid = GUID  '@' '(' Version ')' '{'
	(concepts += Concept)*
	(relations += Relationship)*
	(constraint += Constraint)*
	(predicate += Predicate)*
	(metadata += MetadataItem)*
	'}'
;


DataModel:
	'DataModel' name = Path 'status:' status = Status 'domainid:' guid = GUID  '@' '(' Version ')' '{'
	(elements += DataItem)*
	(relations += Relationship)*
	(constraint += Constraint)*
	(predicate += Predicate)*
	(metadata += MetadataItem)*
	'}'
;

DataItem:
	dataitem = (Concept | Term | Model | ContainerElement | DataType | Import  )
;


QualifiedName:
		ID('.' ID)*
;

Path:
	QualifiedName('/' QualifiedName)* 
;

GUID:
		ID(('.' ID)|('/' ID))*
;
Version:
		INT '.' INT '.' INT
;

Reference:
	"ref" name=ID ":" type=[DataItem]
;

RelationSource:
	DataModel | ContainerElement | DataType 
;

RelationDestination:
	DataModel | ContainerElement | DataType
;

Relationship:
	'relationship' (src = RelationSource ':' dest = RelationDestination)
;

MetadataItem:
	'metadata' key = MetadataRef '=' value = MetadataValue ';'
;

MetadataRef:
	"key" name=ID
;

MetadataValue:
	"value" name=STRING
;

Import:
	'import' importedNamespace = QualifiedNameWithWildcard
;

QualifiedNameWithWildcard:
	QualifiedName '.*'?
;

DataType:
	 PrimitiveType |  ReferenceType | EnumeratedType
;

EnumeratedType:
	'enumtype' 'status:' status = Status 'domainid:' guid = GUID  '@' '(' Version ')' 
	 name = QualifiedName ':' type=PrimitiveType(array ?='[' (length=INT)? ']')?
;
 
ReferenceType:  
	'reftype' 'status:' status = Status 'domainid:' guid = GUID  '@' '(' Version ')' 
	 name = QualifiedName ':' type=[DataClass]
;

PrimitiveType:  
	{PrimitiveType} ('datatype' 'status:' status = Status 'domainid:' guid = GUID  '@' '(' Version ')' 
		 name = QualifiedName ':' type=BasicType (rule=[Constraint])?
	)
;

BasicType:
	typename=('STRING' | 'INT' | BOOLEAN)
;

BOOLEAN:
	('0'|'1')
;

ContainerElement:
	DataClass| DataElement 
;

DataClass:
	'DataClass' name = QualifiedName 'status:' status = Status 'domainid:' guid = GUID'@' '(' Version ')' 
	 ('extends' superType=[DataClass])?  '{'
	  (dataelements += ContainerElement)*
	  (relations += Reference)*
	  '}'
;

DataElement:
	'DataElement' 'status:' status = Status 'domainid:' guid = GUID  '@' '(' Version ')' 
	name = QualifiedName ':' type = [DataType|QualifiedName]
;

Status:
	('draft'|'finalised'|'superceded')
; 

Constraint:
	{Constraint} 'constraint' name = QualifiedName '=' (( src = DataElement ':')? 
		pred = [Predicate]  (':' dest = DataElement)?
	)
;

Predicate:
	'predicate' name = QualifiedName ':' predicate = STRING
;
	